name: CI/CD Pipeline - Spring Boot Java 21

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  DOCKER_IMAGE_NAME: 'your-app-name'
  JFROG_REGISTRY: 'your-company.jfrog.io'
  SONAR_PROJECT_KEY: 'your-project-key'

jobs:
  # Parallel execution of tests and security scanning
  test-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [unit-tests, docker-build, docker-scout, snyk-scan, sonarqube-scan, trivy-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Unit Testing Job
    - name: Run Unit Tests
      if: matrix.task == 'unit-tests'
      run: |
        mvn clean test
        mvn jacoco:report

    - name: Generate Test Report
      if: matrix.task == 'unit-tests'
      uses: dorny/test-reporter@v1
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload Test Coverage to Codecov
      if: matrix.task == 'unit-tests'
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests

    # Docker Build Job
    - name: Set up Docker Buildx
      if: matrix.task == 'docker-build'
      uses: docker/setup-buildx-action@v3

    - name: Build Application JAR
      if: matrix.task == 'docker-build'
      run: mvn clean package -DskipTests

    - name: Build Docker Image
      if: matrix.task == 'docker-build'
      run: |
        docker build -f docker/Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Save Docker Image
      if: matrix.task == 'docker-build'
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} > docker-image.tar

    - name: Upload Docker Image Artifact
      if: matrix.task == 'docker-build'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: docker-image.tar
        retention-days: 1

    # Docker Scout Scanning
    - name: Docker Scout Scan
      if: matrix.task == 'docker-scout'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: local://${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: json
        output: docker-scout-report.json

    - name: Upload Docker Scout Report
      if: matrix.task == 'docker-scout'
      uses: actions/upload-artifact@v3
      with:
        name: docker-scout-report
        path: docker-scout-report.json

    # Snyk Scanning (SAST & SCA)
    - name: Run Snyk to check for vulnerabilities
      if: matrix.task == 'snyk-scan'
      uses: snyk/actions/maven@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json

    - name: Upload Snyk Report
      if: matrix.task == 'snyk-scan'
      uses: actions/upload-artifact@v3
      with:
        name: snyk-report
        path: snyk-report.json

    # SonarQube Scanning
    - name: SonarQube Scan
      if: matrix.task == 'sonarqube-scan'
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .

    - name: Run SonarQube Analysis
      if: matrix.task == 'sonarqube-scan'
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Aqua Trivy Scanning
    - name: Run Trivy vulnerability scanner in repo mode
      if: matrix.task == 'trivy-scan'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-report.json'

    - name: Upload Trivy Report
      if: matrix.task == 'trivy-scan'
      uses: actions/upload-artifact@v3
      with:
        name: trivy-report
        path: trivy-report.json

  # Upload artifacts to JFrog Artifactory
  upload-artifacts:
    needs: test-and-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build Application JAR
      run: mvn clean package -DskipTests

    - name: Download Docker Image Artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker Image
      run: docker load < docker-image.tar

    # Upload JAR to JFrog Artifactory
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: https://${{ env.JFROG_REGISTRY }}
        JF_USER: ${{ secrets.JFROG_USER }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

    - name: Upload JAR to Artifactory
      run: |
        jf rt upload "target/*.jar" "libs-release-local/com/yourcompany/${{ env.DOCKER_IMAGE_NAME }}/${{ github.sha }}/" \
          --build-name="${{ env.DOCKER_IMAGE_NAME }}" \
          --build-number="${{ github.run_number }}"

    # Upload Docker Image to JFrog Artifactory
    - name: Login to JFrog Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.JFROG_REGISTRY }}
        username: ${{ secrets.JFROG_USER }}
        password: ${{ secrets.JFROG_PASSWORD }}

    - name: Tag and Push Docker Image to JFrog
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Publish Build Info to Artifactory
      run: |
        jf rt build-publish "${{ env.DOCKER_IMAGE_NAME }}" "${{ github.run_number }}"

  # Generate and upload consolidated reports
  generate-reports:
    needs: test-and-scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate Consolidated Security Report
      run: |
        mkdir -p reports
        echo "# Security Scan Results - $(date)" > reports/security-summary.md
        echo "## Build: ${{ github.sha }}" >> reports/security-summary.md
        echo "" >> reports/security-summary.md
        
        # Process each security report
        if [ -f "snyk-report/snyk-report.json" ]; then
          echo "### Snyk Scan Results" >> reports/security-summary.md
          echo "- Report available in artifacts" >> reports/security-summary.md
          echo "" >> reports/security-summary.md
        fi
        
        if [ -f "trivy-report/trivy-report.json" ]; then
          echo "### Trivy Scan Results" >> reports/security-summary.md
          echo "- Report available in artifacts" >> reports/security-summary.md
          echo "" >> reports/security-summary.md
        fi
        
        if [ -f "docker-scout-report/docker-scout-report.json" ]; then
          echo "### Docker Scout Results" >> reports/security-summary.md
          echo "- Report available in artifacts" >> reports/security-summary.md
          echo "" >> reports/security-summary.md
        fi

    - name: Upload Consolidated Report
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: reports/

    - name: Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/security-summary.md')) {
            const summary = fs.readFileSync('reports/security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }