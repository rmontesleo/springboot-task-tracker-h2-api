name: CI/CD Pipeline - Spring Boot Java 21 (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  DOCKER_IMAGE_NAME: 'your-app-name'
  JFROG_REGISTRY: ${{ secrets.JFROG_REGISTRY }}
  JFROG_USER: ${{ secrets.JFROG_USER }}
  JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  # Build and test - foundational job that others depend on
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      jar-name: ${{ steps.build.outputs.jar-name }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Get version
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Run unit tests
      run: |
        mvn clean test
        mvn jacoco:report

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Build application
      id: build
      run: |
        mvn package -DskipTests
        JAR_NAME=$(ls target/*.jar | head -1 | xargs basename)
        echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: application-jar
        path: target/*.jar
        retention-days: 7

    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: target/site/jacoco/
        retention-days: 7

  # Docker build job - depends on build success
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: application-jar
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: build
      run: |
        docker build -f docker/Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        # Get image digest for security scanning
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} 2>/dev/null || echo "")
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT

    - name: Save Docker image
      run: docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} > docker-image.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: docker-image.tar
        retention-days: 1

  # Security scans - run in parallel after build
  security-scans:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't stop other scans if one fails
      matrix:
        scan-type: [snyk, sonarqube, trivy, docker-scout]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarQube

    - name: Set up JDK 21
      if: matrix.scan-type == 'sonarqube' || matrix.scan-type == 'snyk'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    # Snyk Scanning
    - name: Run Snyk scan
      if: matrix.scan-type == 'snyk'
      uses: snyk/actions/maven@master
      env:
        SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=snyk-report.json
      continue-on-error: true

    - name: Upload Snyk report
      if: matrix.scan-type == 'snyk'
      uses: actions/upload-artifact@v3
      with:
        name: snyk-report
        path: snyk-report.json

    # SonarQube Scanning
    - name: Download coverage report
      if: matrix.scan-type == 'sonarqube'
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: target/site/jacoco/

    - name: Run SonarQube scan
      if: matrix.scan-type == 'sonarqube'
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      continue-on-error: true

    # Trivy Scanning
    - name: Run Trivy filesystem scan
      if: matrix.scan-type == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-report.json'
      continue-on-error: true

    - name: Download Docker image for Trivy
      if: matrix.scan-type == 'trivy'
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      if: matrix.scan-type == 'trivy'
      run: docker load < docker-image.tar

    - name: Run Trivy image scan
      if: matrix.scan-type == 'trivy'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: 'json'
        output: 'trivy-image-report.json'
      continue-on-error: true

    - name: Upload Trivy reports
      if: matrix.scan-type == 'trivy'
      uses: actions/upload-artifact@v3
      with:
        name: trivy-reports
        path: trivy-*-report.json

    # Docker Scout Scanning
    - name: Download Docker image for Scout
      if: matrix.scan-type == 'docker-scout'
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      if: matrix.scan-type == 'docker-scout'
      run: docker load < docker-image.tar

    - name: Run Docker Scout scan
      if: matrix.scan-type == 'docker-scout'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: json
        output: docker-scout-report.json
      continue-on-error: true

    - name: Upload Docker Scout report
      if: matrix.scan-type == 'docker-scout'
      uses: actions/upload-artifact@v3
      with:
        name: docker-scout-report
        path: docker-scout-report.json

  # Quality gate - decides if we should proceed with deployment
  quality-gate:
    needs: [build-and-test, docker-build, security-scans]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      deploy-approved: ${{ steps.gate.outputs.approved }}
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3
      continue-on-error: true

    - name: Evaluate quality gate
      id: gate
      run: |
        # Define your quality gate logic here
        APPROVED=true
        
        # Check if critical jobs failed
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "❌ Build and test failed"
          APPROVED=false
        fi
        
        if [ "${{ needs.docker-build.result }}" != "success" ]; then
          echo "❌ Docker build failed"
          APPROVED=false
        fi
        
        # Security scans can fail but still allow deployment (with warnings)
        if [ "${{ needs.security-scans.result }}" != "success" ]; then
          echo "⚠️ Some security scans failed - review required"
        fi
        
        echo "approved=$APPROVED" >> $GITHUB_OUTPUT
        
        if [ "$APPROVED" = "true" ]; then
          echo "✅ Quality gate passed - deployment approved"
        else
          echo "❌ Quality gate failed - deployment blocked"
        fi

  # Deploy artifacts - only runs if quality gate passes
  deploy-artifacts:
    needs: [build-and-test, docker-build, quality-gate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.quality-gate.outputs.deploy-approved == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: application-jar
        path: target/

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: docker load < docker-image.tar

    # Upload JAR to JFrog
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: https://${{ env.JFROG_REGISTRY }}
        JF_USER: ${{ env.JFROG_USER }}
        JF_PASSWORD: ${{ env.JFROG_PASSWORD }}

    - name: Upload JAR to Artifactory
      run: |
        jf rt upload "target/${{ needs.build-and-test.outputs.jar-name }}" \
          "libs-release-local/com/yourcompany/${{ env.DOCKER_IMAGE_NAME }}/${{ needs.build-and-test.outputs.version }}/" \
          --build-name="${{ env.DOCKER_IMAGE_NAME }}" \
          --build-number="${{ github.run_number }}"

    # Upload Docker image to JFrog
    - name: Login to JFrog Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.JFROG_REGISTRY }}
        username: ${{ env.JFROG_USER }}
        password: ${{ env.JFROG_PASSWORD }}

    - name: Push Docker image to JFrog
      run: |
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:latest
        
        docker push ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}
        docker push ${{ env.JFROG_REGISTRY }}/docker-local/${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Publish build info
      run: |
        jf rt build-publish "${{ env.DOCKER_IMAGE_NAME }}" "${{ github.run_number }}"

  # Generate comprehensive reports
  generate-reports:
    needs: [build-and-test, docker-build, security-scans]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      continue-on-error: true

    - name: Generate security summary
      run: |
        mkdir -p reports
        
        cat > reports/security-summary.md << 'EOF'
        # Security Scan Results
        
        **Build:** `${{ github.sha }}`  
        **Date:** $(date)  
        **Branch:** `${{ github.ref_name }}`
        
        ## Job Status Summary
        - **Build & Test:** ${{ needs.build-and-test.result }}
        - **Docker Build:** ${{ needs.docker-build.result }}
        - **Security Scans:** ${{ needs.security-scans.result }}
        
        ## Available Reports
        EOF
        
        # Check which reports are available
        [ -f "snyk-report/snyk-report.json" ] && echo "- ✅ Snyk Security Report" >> reports/security-summary.md
        [ -f "trivy-reports/trivy-fs-report.json" ] && echo "- ✅ Trivy Filesystem Report" >> reports/security-summary.md
        [ -f "trivy-reports/trivy-image-report.json" ] && echo "- ✅ Trivy Image Report" >> reports/security-summary.md
        [ -f "docker-scout-report/docker-scout-report.json" ] && echo "- ✅ Docker Scout Report" >> reports/security-summary.md
        
        echo "" >> reports/security-summary.md
        echo "## Next Steps" >> reports/security-summary.md
        echo "Review individual security reports for detailed findings and remediation steps." >> reports/security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: reports/

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/security-summary.md')) {
            const summary = fs.readFileSync('reports/security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }